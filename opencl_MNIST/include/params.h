// params.h

#ifndef PARAMS_H
#define PARAMS_H


const int hiddenSize = 8;
const int inputSize = 9;
const int timeSteps = 10;
const int FC_units = 16;

//float inputWeights[hiddenSize * (inputSize + hiddenSize)] = {
//    -0.2, 0.5, 0.1, 0.1, 0.0, 0.0, 1.0,
//    -0.2, 0.5, 0.1, 0.1, 0.0, 0.0, 1.0,
//    -0.2, 0.5, 0.1, 0.1, 0.0, 0.0, 1.0,
//    -0.2, 0.5, 0.1, 0.1, 0.0, 0.0, 1.0
//};
//float forgetWeights[hiddenSize * (inputSize + hiddenSize)] = {
//    -0.1, 0.2, 0.1, 0.1, 0.0, 0.0, 0.0,
//    -0.1, 0.2, 0.1, 0.1, 0.0, 0.0, 0.0,
//    -0.1, 0.2, 0.1, 0.1, 0.0, 0.0, 0.0,
//    -0.1, 0.2, 0.1, 0.1, 0.0, 0.0, 0.0
//};
//float outputWeights[hiddenSize * (inputSize + hiddenSize)] = {
//    0.1, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0,
//    0.1, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0,
//    0.1, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0,
//    0.1, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0
//};
//float candidateWeights[hiddenSize * (inputSize + hiddenSize)] = {
//    0.1, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0,
//    0.1, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0,
//    0.1, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0,
//    0.1, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0
//};
//
//float inputBias[hiddenSize] = {
//    0.1, 0.1, 0.1, 0.1
//};
//        
//float forgetBias[hiddenSize] = {
//    0.1, 0.1, 0.1, 0.1
//};
//        
//float outputBias[hiddenSize] = {
//    1, 1, 1, 1
//};
//        
//float candidateBias[hiddenSize] = {
//    -0.1, -0.1, -0.1, -0.1
//};
float inputWeights[hiddenSize * (inputSize + hiddenSize)] = {
    1.166255e-001, -2.006619e-001, 3.001901e-002, 1.769654e-001, -1.160068e-001,-1.030695e-001, 1.861748e-001, 8.113430e-002, -1.478899e-002, 8.781904e-002,
    1.175869e-001, 1.315261e-001, -7.276609e-002, 3.995525e-002, 1.794068e-001, -2.787899e-003, 5.754130e-002,
    -1.625022e-001, -2.171890e-002, -1.490075e-001, -2.244853e-001, -1.282004e-001, -4.412724e-002, 1.379403e-001, -2.081852e-001, -1.637915e-001, -7.890614e-002,
    1.543665e-001, 3.552257e-002, -1.715092e-001, 4.241921e-002, -2.248008e-001, 1.226255e-001, -2.317604e-002,
    1.846602e-001, 1.262849e-002, -1.543133e-001, 1.559041e-001, 1.089207e-001, 5.123780e-003, 4.136065e-002, -1.343127e-001, -1.905117e-001, 1.290671e-001,
    4.933768e-002, -3.651994e-003, 1.603592e-001, 9.926862e-002, 6.582987e-002, 5.789826e-002, 2.778842e-001,
    2.824257e-001, -8.081052e-002, -1.360039e-001, 3.202256e-003, 2.012767e-001, 1.134233e-001, -1.156076e-001, -1.202931e-001, 4.761064e-002, -2.368419e-002,
    -4.848448e-002, 1.102367e-001, -2.890402e-002, -3.116645e-002, -9.704052e-003, -1.508918e-002, 1.402081e-001,
    -1.838806e-001, 9.814030e-002, 1.755496e-001, -8.442260e-002, -1.231614e-001, 2.174764e-001, 1.479873e-001, 1.357336e-001, -5.206600e-002, -2.130640e-001,
    3.202187e-002, -1.234222e-003, -6.425490e-002, -6.983461e-004, 3.354969e-001, 5.634686e-002, -6.581547e-002,
    -7.391633e-003, 8.851669e-002, 1.240988e-001, -1.324745e-001, -2.115267e-002, -2.232605e-001, -6.607083e-002, -1.810353e-001, 1.249589e-001, 5.073604e-002,
    -1.480582e-001, -1.773414e-001, 9.137294e-002, 9.400730e-002, 1.728724e-001, 1.057579e-001, 4.501124e-002,
    -4.425276e-002, -2.746491e-001, -1.449718e-001, -1.406241e-001, 1.092650e-001, 1.163965e-001, 5.154589e-002, -3.495032e-002, -6.333065e-002, -4.025413e-002,
    -1.614651e-001, -1.905701e-001, -2.263167e-001, -1.476884e-001, -1.432742e-001, -1.829636e-001, -2.933915e-001,
    -1.729201e-001, 3.186182e-002, 1.171428e-001, 2.719105e-001, 1.351191e-001, 3.565567e-003, 3.290323e-002, -9.293296e-002, -8.526891e-002, -1.035491e-001,
    2.696654e-001, 1.882303e-002, -1.446720e-001, -7.120480e-003, -1.779057e-001, 1.175755e-001, -1.665055e-001

};

float forgetWeights[hiddenSize * (inputSize + hiddenSize)] = {
    3.351840e-002, 8.667184e-004, -7.882661e-002, -1.265023e-001, -2.839676e-001, -9.222204e-002, 6.010731e-002, 1.452425e-002, 4.596705e-002, 1.477392e-001,
    4.663258e-002, -3.659804e-002, 1.135457e-001, 1.448810e-001, 4.974946e-002, 2.213503e-002, -2.197440e-002,
    2.523293e-002, -7.767785e-002, 3.394936e-001, -5.567017e-001, -2.58103e-001, -2.439775e-001, -3.71978e-001, -2.739327e-001, -4.091759e-001, -1.575039e-001,
    2.184388e-001, 2.268049e-001, -6.346201e-003, 1.525468e-001, -9.357311e-002, -1.307503e-001, -1.061885e-001,
    -2.861027e-002, 1.189742e-001, -9.148964e-002, 6.907764e-002, 3.005560e-002, -1.853806e-003, 5.427352e-002, -1.876748e-001, 2.508605e-001, -8.340564e-002,
    3.516890e-002, -3.712587e-002, 1.164055e-001, 1.093958e-001, 5.293296e-002, -1.226911e-001, -3.477927e-002,
    9.521129e-002, -6.635758e-002, 7.248521e-002, -1.520798e-001, -1.600436e-001, 2.999270e-001, 1.199769e-001, 3.536667e-002, -7.708015e-002, -2.815693e-002,
    2.471952e-003, 1.041974e-001, 3.614835e-002, 1.355756e-002, -8.011323e-002, -1.260007e-001, 2.259238e-002,
    6.218519e-002, -4.946489e-002, -3.984290e-002, 2.760361e-002, 1.084257e-001, -5.984376e-002, -6.719519e-002, -1.180507e-001, -1.743793e-001, -1.054849e-001,
    1.008211e-001, -8.065600e-002, -1.761038e-001, -9.766514e-002, -1.324448e-002, -1.028145e-003, 8.209274e-002,
    -1.136449e-001, -1.880066e-001, 2.792687e-002, -1.596060e-001, -3.701071e-002, -1.730002e-001, -5.013748e-002, -3.571596e-002, -6.215040e-002, -1.632497e-001,
    9.916435e-002, 1.372756e-001, 1.085777e-001, 1.600730e-001, 6.306531e-002, -9.676857e-002, 1.700150e-003,
    -2.204238e-002, 1.167281e-001, 4.689266e-002, -9.023908e-002, 1.141429e-001, 7.403421e-002, 1.411810e-001, 2.622221e-002, -1.816839e-001, -1.810960e-001,
    9.764540e-003, 3.961005e-002, -4.213709e-002, 3.120654e-002, -1.348394e-001, -1.021951e-001, -1.312559e-001,
    1.664417e-001, -4.968090e-002, -1.301798e-001, -4.523687e-003, 5.096563e-002, -2.569359e-002, -7.156739e-002, 2.605520e-001, -3.877321e-002, -6.590801e-002,
    -6.255205e-002, 5.707724e-002, -2.142046e-001, 1.184326e-001, -1.485029e-001, -1.178421e-001, 0
};


float outputWeights[hiddenSize * (inputSize + hiddenSize)] = {
    -1.715015e-001, -1.586418e-001, -5.328158e-001, -2.558601e-001, -2.403910e-001, -6.159427e-002, 7.977680e-002, -9.333304e-002, -1.196605e-001, 1.179725e-001,
    1.507771e-002, -1.181323e-001, -2.338115e-001, -2.763604e-001, -1.028474e-001, -5.910432e-003, 1.148110e-001,
    -8.746938e-002, -1.332711e-001, -2.816296e-001, -3.013247e-001, -3.051709e-001, -2.555558e-001, -1.825995e-001, -2.545853e-002, -1.317716e-001, -2.948442e-001,
    -4.365117e-001, 1.690289e-001, -1.102281e-001, -1.412722e-001, 8.883055e-002, 2.001995e-001, -1.411758e-001,
    -2.897336e-002, 9.291650e-002, 2.228856e-002, -3.689782e-002, -3.218254e-002, 5.628930e-002, 1.086591e-001, -1.078368e-001, 6.317537e-002, -3.941214e-002,
    -6.469853e-003, -4.094054e-002, 2.469596e-001, 8.978163e-002, 3.174793e-001, 7.853375e-002, -7.902585e-002,
    -2.296141e-002, 9.594035e-002, -3.938230e-002, 8.597647e-002, 1.934160e-001, 8.651998e-002, 8.956774e-002, -9.783416e-002, 1.991014e-001, -4.802386e-002,
    -1.885708e-001, 2.542270e-001, 9.083592e-002, -1.435116e-001, 1.065858e-001, 9.363707e-002, 6.026353e-002,
    -1.762149e-001, 4.555638e-002, -1.067813e-001, 2.652510e-002, 1.555348e-002, -5.987626e-002, -2.038999e-001, 9.002306e-002, -1.096465e-001, 7.079182e-002,
    7.581417e-002, -3.701383e-002, 4.772369e-003, 7.260399e-002, 2.203698e-001, 2.711110e-001, 5.100780e-002,
    -1.757896e-001, -9.485985e-002, -1.173659e-002, 6.066495e-002, 7.276629e-002, 1.465684e-001, -8.813218e-002, 8.814460e-002, 4.306904e-002, -5.059012e-002,
    1.269044e-001, 2.390756e-002, 5.204822e-002, 2.810974e-001, -2.388660e-002, -4.579381e-002, 3.088568e-001,
    1.135264e-001, 1.471815e-002, -8.773314e-002, -1.282016e-003, -2.119887e-001, -6.370327e-003, -8.702876e-002, -8.708122e-002, -9.999968e-002, -9.962302e-002,
    -2.230469e-001, -3.577296e-001, -4.365958e-001, -2.981971e-001, -3.031370e-001, -3.208622e-001, -1.825957e-001,
    -1.445240e-001, -7.193115e-002, 2.771019e-002, 3.768272e-002, 7.067276e-002, 5.051820e-001, 1.229372e-001, 1.985684e-001, 4.203953e-003, -1.914200e-003,
    1.673357e-001, 1.737598e-002, -9.892635e-002, -7.570814e-002, -2.378351e-003, 1.694645e-001, 1.716678e-001,
};



float candidateWeights[hiddenSize * (inputSize + hiddenSize)] = {
    1.166255e-001, -2.006619e-001, 3.001901e-002, 1.769654e-001, -1.160068e-001, -1.030695e-001, 1.861748e-001, 8.113430e-002, -1.478899e-002, 8.781904e-002,
    1.175869e-001, 1.315261e-001, -7.276609e-002, 3.995525e-002, 1.794068e-001, -2.787899e-003, 5.754130e-002,
    -1.625022e-001, -2.171890e-002, -1.490075e-001, -2.244853e-001, -1.282004e-001, -4.412724e-002, 1.379403e-001, -2.081852e-001, -1.637915e-001, -7.890614e-002,
    1.543665e-001, 3.552257e-002, -1.715092e-001, 4.241921e-002, -2.248008e-001, 1.226255e-001, -2.317604e-002,
    1.846602e-001, 1.262849e-002, -1.543133e-001, 1.559041e-001, 1.089207e-001, 5.123780e-003, 4.136065e-002, -1.343127e-001, -1.905117e-001, 1.290671e-001,
    4.933768e-002, -3.651994e-003, 1.603592e-001, 9.926862e-002, 6.582987e-002, 5.789826e-002, 2.778842e-001,
    2.824257e-001, -8.081052e-002, -1.360039e-001, 3.202256e-003, 2.012767e-001, 1.134233e-001, -1.156076e-001, -1.202931e-001, 4.761064e-002, -2.368419e-002,
    -4.848448e-002, 1.102367e-001, -2.890402e-002, -3.116645e-002, -9.704052e-003, -1.508918e-002, 1.402081e-001,
    9.699807e-002, 1.660088e-001, 1.401280e-001, -3.536028e-002, -1.917231e-001, 2.185413e-001, 3.593840e-001, -1.678688e-001, 2.577330e-001, 6.829919e-002,
    -2.921916e-001, 1.869563e-001, -3.716822e-001, -8.787060e-002, -1.568279e-001, -1.834975e-001, -3.010622e-001,
    -1.586189e-003, 2.499941e-001, 3.897851e-002, 3.186183e-001, -9.005082e-002, 1.091981e-001, 7.366654e-002, 3.126248e-001, -1.128028e-002, -2.573718e-001,
    -5.625402e-001, 3.283741e-001, 8.467778e-002, -1.652270e-001, 5.818474e-002, 8.340199e-002, 2.819731e-001,
    -1.783244e-001, -4.014577e-001, -8.405359e-003, -5.632779e-002, 1.049741e-001, -1.864910e-001, -1.606578e-001, -3.307503e-001, -2.212279e-001, 9.738295e-002,
    1.078724e-001, -8.036675e-002, -2.057390e-001, 2.217877e-001, -2.016252e-002, 8.930612e-002, 1.206432e-001,
    1.865319e-001, -4.536291e-001, -7.667208e-002, -1.476850e-001, 3.986051e-001, -2.629591e-001, -2.432405e-001, -2.632790e-001, -2.021641e-001, 5.236132e-002,
    -4.442691e-002, 2.872510e-001, -2.722732e-002, -2.830015e-001, 1.108265e-001, 3.441147e-001, -1.082300e-001
};



float inputBias[hiddenSize] = {
    -1, 1, -1, 1, -1, 1, -1, 1
};
        
float forgetBias[hiddenSize] = {
    0, 1, 0, 1, 0, 1, 0, 1,
};
        
float outputBias[hiddenSize] = {
    1, 0, 1, 0, 1, 0, 1, 0,
};
        
float candidateBias[hiddenSize] = {
    -1, -1, -1, -1, -1, -1, -1, -1
};

float FC_weight[FC_units * hiddenSize] = {
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1,

};
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
    //1, 0, 0, 0, 0, 0, 0, 0,
float FC_bias[FC_units] = {
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
};

#endif // PARAMS_H
